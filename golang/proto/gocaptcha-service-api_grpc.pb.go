// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: gocaptcha-service-api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoCaptchaService_GetData_FullMethodName       = "/gocaptcha.GoCaptchaService/GetData"
	GoCaptchaService_CheckData_FullMethodName     = "/gocaptcha.GoCaptchaService/CheckData"
	GoCaptchaService_CheckStatus_FullMethodName   = "/gocaptcha.GoCaptchaService/CheckStatus"
	GoCaptchaService_GetStatusInfo_FullMethodName = "/gocaptcha.GoCaptchaService/GetStatusInfo"
	GoCaptchaService_DelStatusInfo_FullMethodName = "/gocaptcha.GoCaptchaService/DelStatusInfo"
)

// GoCaptchaServiceClient is the client API for GoCaptchaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoCaptchaServiceClient interface {
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	CheckData(ctx context.Context, in *CheckDataRequest, opts ...grpc.CallOption) (*CheckDataResponse, error)
	CheckStatus(ctx context.Context, in *StatusInfoRequest, opts ...grpc.CallOption) (*StatusInfoResponse, error)
	GetStatusInfo(ctx context.Context, in *StatusInfoRequest, opts ...grpc.CallOption) (*StatusInfoResponse, error)
	DelStatusInfo(ctx context.Context, in *StatusInfoRequest, opts ...grpc.CallOption) (*StatusInfoResponse, error)
}

type goCaptchaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoCaptchaServiceClient(cc grpc.ClientConnInterface) GoCaptchaServiceClient {
	return &goCaptchaServiceClient{cc}
}

func (c *goCaptchaServiceClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, GoCaptchaService_GetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCaptchaServiceClient) CheckData(ctx context.Context, in *CheckDataRequest, opts ...grpc.CallOption) (*CheckDataResponse, error) {
	out := new(CheckDataResponse)
	err := c.cc.Invoke(ctx, GoCaptchaService_CheckData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCaptchaServiceClient) CheckStatus(ctx context.Context, in *StatusInfoRequest, opts ...grpc.CallOption) (*StatusInfoResponse, error) {
	out := new(StatusInfoResponse)
	err := c.cc.Invoke(ctx, GoCaptchaService_CheckStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCaptchaServiceClient) GetStatusInfo(ctx context.Context, in *StatusInfoRequest, opts ...grpc.CallOption) (*StatusInfoResponse, error) {
	out := new(StatusInfoResponse)
	err := c.cc.Invoke(ctx, GoCaptchaService_GetStatusInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCaptchaServiceClient) DelStatusInfo(ctx context.Context, in *StatusInfoRequest, opts ...grpc.CallOption) (*StatusInfoResponse, error) {
	out := new(StatusInfoResponse)
	err := c.cc.Invoke(ctx, GoCaptchaService_DelStatusInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoCaptchaServiceServer is the server API for GoCaptchaService service.
// All implementations must embed UnimplementedGoCaptchaServiceServer
// for forward compatibility
type GoCaptchaServiceServer interface {
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	CheckData(context.Context, *CheckDataRequest) (*CheckDataResponse, error)
	CheckStatus(context.Context, *StatusInfoRequest) (*StatusInfoResponse, error)
	GetStatusInfo(context.Context, *StatusInfoRequest) (*StatusInfoResponse, error)
	DelStatusInfo(context.Context, *StatusInfoRequest) (*StatusInfoResponse, error)
	mustEmbedUnimplementedGoCaptchaServiceServer()
}

// UnimplementedGoCaptchaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoCaptchaServiceServer struct {
}

func (UnimplementedGoCaptchaServiceServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedGoCaptchaServiceServer) CheckData(context.Context, *CheckDataRequest) (*CheckDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckData not implemented")
}
func (UnimplementedGoCaptchaServiceServer) CheckStatus(context.Context, *StatusInfoRequest) (*StatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedGoCaptchaServiceServer) GetStatusInfo(context.Context, *StatusInfoRequest) (*StatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusInfo not implemented")
}
func (UnimplementedGoCaptchaServiceServer) DelStatusInfo(context.Context, *StatusInfoRequest) (*StatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStatusInfo not implemented")
}
func (UnimplementedGoCaptchaServiceServer) mustEmbedUnimplementedGoCaptchaServiceServer() {}

// UnsafeGoCaptchaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoCaptchaServiceServer will
// result in compilation errors.
type UnsafeGoCaptchaServiceServer interface {
	mustEmbedUnimplementedGoCaptchaServiceServer()
}

func RegisterGoCaptchaServiceServer(s grpc.ServiceRegistrar, srv GoCaptchaServiceServer) {
	s.RegisterService(&GoCaptchaService_ServiceDesc, srv)
}

func _GoCaptchaService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCaptchaServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCaptchaService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCaptchaServiceServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCaptchaService_CheckData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCaptchaServiceServer).CheckData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCaptchaService_CheckData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCaptchaServiceServer).CheckData(ctx, req.(*CheckDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCaptchaService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCaptchaServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCaptchaService_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCaptchaServiceServer).CheckStatus(ctx, req.(*StatusInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCaptchaService_GetStatusInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCaptchaServiceServer).GetStatusInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCaptchaService_GetStatusInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCaptchaServiceServer).GetStatusInfo(ctx, req.(*StatusInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCaptchaService_DelStatusInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCaptchaServiceServer).DelStatusInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoCaptchaService_DelStatusInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCaptchaServiceServer).DelStatusInfo(ctx, req.(*StatusInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoCaptchaService_ServiceDesc is the grpc.ServiceDesc for GoCaptchaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoCaptchaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gocaptcha.GoCaptchaService",
	HandlerType: (*GoCaptchaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _GoCaptchaService_GetData_Handler,
		},
		{
			MethodName: "CheckData",
			Handler:    _GoCaptchaService_CheckData_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _GoCaptchaService_CheckStatus_Handler,
		},
		{
			MethodName: "GetStatusInfo",
			Handler:    _GoCaptchaService_GetStatusInfo_Handler,
		},
		{
			MethodName: "DelStatusInfo",
			Handler:    _GoCaptchaService_DelStatusInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gocaptcha-service-api.proto",
}
